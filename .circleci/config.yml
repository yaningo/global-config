version: 2.1

commands:
  dispatch:
    parameters:
      force-update:
        type: boolean
        default: false
      skip-build-on-targets:
        type: boolean
        default: true
      config-to-deploy:
        description: Path to the configuration file to be deployed to all targets [REQUIRED]
        type: string
      targets-list:
        description: "Path to file containing the list of repo and branch targets. Format : org/repo, branch (1 target per line) [REQUIRED]"
        type: string
        
    steps:
      - run:
          name: Check stuff
          command: |
            CheckEnvVars() {
                        if [ -z "${GH_TOKEN:-}" ]; then
                            echo "In order to use the Config dispatcher orb, an OAuth token must be present via the GH_TOKEN environment variable."
                            echo "See instructions in the GitHub documentation: https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-tokenp"
                            exit 1
                        fi
            }
            
            BuildOrNot() {
                        if [ << parameters.skip-build-on-targets >> ]; then
                            echo "As per your parameters, build will be skipped on target projects upon the configuration deployment"
                            echo ' export MESSAGE="Global config update [skip ci]" ' >> BASH_ENV
                         else
                            echo "As per your parameters, the global config update will trigger a build in the target project(s)"
                            echo ' export MESSAGE="Global config update" ' >> BASH_ENV
                        fi
            }
            
            CheckEnvVars
            BuildOrNot
            
      - run:
          name: Deploying configuration to targets
          command: |
            echo 'export GLOBAL_64="$(cat << parameters.config-to-deploy >>l | base64 -w 0)" ' >> $BASH_ENV
            while read -r destination
              do
                echo "export REPO=$(echo $destination | awk -F', ' '{print $1}')" >> BASH_ENV
                echo "export BRANCH=$(echo $destination | awk -F', ' '{print $2}')" >> BASH_ENV
                source BASH_ENV
                echo $REPO
                echo $BRANCH
                
                if [[ $(curl -s -w '%{response_code}' --output /dev/null --location --request GET "https://api.github.com/repos/$REPO/contents/.circleci/config.yml?ref=$BRANCH" --header "Authorization: token $GH_TOKEN" --header "Accept: application/vnd.github.v3+json") == 404 ]];
                  then
                    echo "Debug: the response is 404"
                    echo $REPO
                    echo $BRANCH
                    curl -X PUT https://api.github.com/repos/$REPO/contents/.circleci/config.yml -H "Authorization: token $GH_TOKEN" -H 'Accept: application/vnd.github.v3+json' -d '{"message":"'"$MESSAGE"'","content":"'"$GLOBAL_64"'","branch":"'"${BRANCH}"'"}'
                  else
                    echo "Debug: the response is 200"
                    echo $REPO
                    echo $BRANCH
                    echo 'export BLOB_SHA=$(curl --location --request GET "https://api.github.com/repos/${REPO}/contents/.circleci/config.yml?ref=${BRANCH}" --header "Authorization: token ${GH_TOKEN}" --header "Accept: application/vnd.github.v3+json"|jq -r .sha)' >> $BASH_ENV
                    source $BASH_ENV
                    echo $BLOB_SHA
                    echo "Central config blob is $(git hash-object global-ci.yml)"
                      if [[ $(git hash-object global-ci.yml) != $BLOB_SHA ]] || [[ << parameters.force-update >> ]];
                        then
                          curl -X PUT https://api.github.com/repos/$REPO/contents/.circleci/config.yml --header "Authorization: token ${GH_TOKEN}" --header "Accept: application/vnd.github.v3+json" --data-raw '{"message":"'"$MESSAGE"'","content":"'"${GLOBAL_64}"'","sha": "'"${BLOB_SHA}"'","branch":"'"$BRANCH"'"}'
                        else
                          echo "Not pushing same version of the config file"
                      fi
                fi  
              done < << parameters.targets-list >>
          when: on_fail
jobs:
#   config-validation:
#     docker:
#       - image: circleci/python
#     steps:
#       - checkout
#       - run:
#           name: Check global config validity
#           command: |
#               circleci config process toto.txt | circleci config validate 
    
  deploy-config:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - dispatch:
          skip-build-on-targets: false
          config-to-deploy: toto.yml
          targets-list: yoyo.txt
      - run:
          name: Get commit infosss
          command: |
            echo << pipeline.git.revision >>
            # curl --location --request GET "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/commits" --header "Authorization: token ${GH_TOKEN}" --header "Accept: application/vnd.github.v3+json" -d "sha: << pipeline.git.revision >>"
            git log  -n 1
          
workflows:
#  version: 2
  main:
    jobs:
#       - config-validation
      - deploy-config
#           skip-build-on-targets: false
          # force-update: true
#           config-to-deploy: toto.yml
#           targets-list: yoyo.txt
#           requires:
#             - config-validation
